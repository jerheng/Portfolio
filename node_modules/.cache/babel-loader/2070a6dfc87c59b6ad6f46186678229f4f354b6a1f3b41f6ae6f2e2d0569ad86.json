{"ast":null,"code":"const ChainedMap = require('./ChainedMap');\nconst ChainedSet = require('./ChainedSet');\nconst Resolve = require('./Resolve');\nconst ResolveLoader = require('./ResolveLoader');\nconst Output = require('./Output');\nconst DevServer = require('./DevServer');\nconst Plugin = require('./Plugin');\nconst Module = require('./Module');\nconst Optimization = require('./Optimization');\nconst Performance = require('./Performance');\nmodule.exports = class extends ChainedMap {\n  constructor() {\n    super();\n    this.devServer = new DevServer(this);\n    this.entryPoints = new ChainedMap(this);\n    this.module = new Module(this);\n    this.node = new ChainedMap(this);\n    this.optimization = new Optimization(this);\n    this.output = new Output(this);\n    this.performance = new Performance(this);\n    this.plugins = new ChainedMap(this);\n    this.resolve = new Resolve(this);\n    this.resolveLoader = new ResolveLoader(this);\n    this.extend(['amd', 'bail', 'cache', 'context', 'devtool', 'externals', 'loader', 'mode', 'name', 'parallelism', 'profile', 'recordsInputPath', 'recordsPath', 'recordsOutputPath', 'stats', 'target', 'watch', 'watchOptions']);\n  }\n  static toString(config, {\n    verbose = false,\n    configPrefix = 'config'\n  } = {}) {\n    // eslint-disable-next-line global-require\n    const {\n      stringify\n    } = require('javascript-stringify');\n    return stringify(config, (value, indent, stringify) => {\n      // improve plugin output\n      if (value && value.__pluginName) {\n        const prefix = `/* ${configPrefix}.${value.__pluginType}('${value.__pluginName}') */\\n`;\n        const constructorExpression = value.__pluginPath ?\n        // The path is stringified to ensure special characters are escaped\n        // (such as the backslashes in Windows-style paths).\n        `(require(${stringify(value.__pluginPath)}))` : value.__pluginConstructorName;\n        if (constructorExpression) {\n          // get correct indentation for args by stringifying the args array and\n          // discarding the square brackets.\n          const args = stringify(value.__pluginArgs).slice(1, -1);\n          return `${prefix}new ${constructorExpression}(${args})`;\n        }\n        return prefix + stringify(value.__pluginArgs && value.__pluginArgs.length ? {\n          args: value.__pluginArgs\n        } : {});\n      }\n\n      // improve rule/use output\n      if (value && value.__ruleNames) {\n        const ruleTypes = value.__ruleTypes;\n        const prefix = `/* ${configPrefix}.module${value.__ruleNames.map((r, index) => `.${ruleTypes ? ruleTypes[index] : 'rule'}('${r}')`).join('')}${value.__useName ? `.use('${value.__useName}')` : ``} */\\n`;\n        return prefix + stringify(value);\n      }\n      if (value && value.__expression) {\n        return value.__expression;\n      }\n\n      // shorten long functions\n      if (typeof value === 'function') {\n        if (!verbose && value.toString().length > 100) {\n          return `function () { /* omitted long function */ }`;\n        }\n      }\n      return stringify(value);\n    }, 2);\n  }\n  entry(name) {\n    return this.entryPoints.getOrCompute(name, () => new ChainedSet(this));\n  }\n  plugin(name) {\n    return this.plugins.getOrCompute(name, () => new Plugin(this, name));\n  }\n  toConfig() {\n    const entryPoints = this.entryPoints.entries() || {};\n    return this.clean(Object.assign(this.entries() || {}, {\n      node: this.node.entries(),\n      output: this.output.entries(),\n      resolve: this.resolve.toConfig(),\n      resolveLoader: this.resolveLoader.toConfig(),\n      devServer: this.devServer.toConfig(),\n      module: this.module.toConfig(),\n      optimization: this.optimization.toConfig(),\n      plugins: this.plugins.values().map(plugin => plugin.toConfig()),\n      performance: this.performance.entries(),\n      entry: Object.keys(entryPoints).reduce((acc, key) => Object.assign(acc, {\n        [key]: entryPoints[key].values()\n      }), {})\n    }));\n  }\n  toString(options) {\n    return module.exports.toString(this.toConfig(), options);\n  }\n  merge(obj = {}, omit = []) {\n    const omissions = ['node', 'output', 'resolve', 'resolveLoader', 'devServer', 'optimization', 'performance', 'module'];\n    if (!omit.includes('entry') && 'entry' in obj) {\n      Object.keys(obj.entry).forEach(name => this.entry(name).merge([].concat(obj.entry[name])));\n    }\n    if (!omit.includes('plugin') && 'plugin' in obj) {\n      Object.keys(obj.plugin).forEach(name => this.plugin(name).merge(obj.plugin[name]));\n    }\n    omissions.forEach(key => {\n      if (!omit.includes(key) && key in obj) {\n        this[key].merge(obj[key]);\n      }\n    });\n    return super.merge(obj, [...omit, ...omissions, 'entry', 'plugin']);\n  }\n};","map":{"version":3,"names":["ChainedMap","require","ChainedSet","Resolve","ResolveLoader","Output","DevServer","Plugin","Module","Optimization","Performance","module","exports","constructor","devServer","entryPoints","node","optimization","output","performance","plugins","resolve","resolveLoader","extend","toString","config","verbose","configPrefix","stringify","value","indent","__pluginName","prefix","__pluginType","constructorExpression","__pluginPath","__pluginConstructorName","args","__pluginArgs","slice","length","__ruleNames","ruleTypes","__ruleTypes","map","r","index","join","__useName","__expression","entry","name","getOrCompute","plugin","toConfig","entries","clean","Object","assign","values","keys","reduce","acc","key","options","merge","obj","omit","omissions","includes","forEach","concat"],"sources":["/Users/jeremyheng/Documents/GitHub/Portfolio/my-portfolio/node_modules/webpack-chain/src/Config.js"],"sourcesContent":["const ChainedMap = require('./ChainedMap');\nconst ChainedSet = require('./ChainedSet');\nconst Resolve = require('./Resolve');\nconst ResolveLoader = require('./ResolveLoader');\nconst Output = require('./Output');\nconst DevServer = require('./DevServer');\nconst Plugin = require('./Plugin');\nconst Module = require('./Module');\nconst Optimization = require('./Optimization');\nconst Performance = require('./Performance');\n\nmodule.exports = class extends ChainedMap {\n  constructor() {\n    super();\n    this.devServer = new DevServer(this);\n    this.entryPoints = new ChainedMap(this);\n    this.module = new Module(this);\n    this.node = new ChainedMap(this);\n    this.optimization = new Optimization(this);\n    this.output = new Output(this);\n    this.performance = new Performance(this);\n    this.plugins = new ChainedMap(this);\n    this.resolve = new Resolve(this);\n    this.resolveLoader = new ResolveLoader(this);\n    this.extend([\n      'amd',\n      'bail',\n      'cache',\n      'context',\n      'devtool',\n      'externals',\n      'loader',\n      'mode',\n      'name',\n      'parallelism',\n      'profile',\n      'recordsInputPath',\n      'recordsPath',\n      'recordsOutputPath',\n      'stats',\n      'target',\n      'watch',\n      'watchOptions',\n    ]);\n  }\n\n  static toString(config, { verbose = false, configPrefix = 'config' } = {}) {\n    // eslint-disable-next-line global-require\n    const { stringify } = require('javascript-stringify');\n\n    return stringify(\n      config,\n      (value, indent, stringify) => {\n        // improve plugin output\n        if (value && value.__pluginName) {\n          const prefix = `/* ${configPrefix}.${value.__pluginType}('${value.__pluginName}') */\\n`;\n          const constructorExpression = value.__pluginPath\n            ? // The path is stringified to ensure special characters are escaped\n              // (such as the backslashes in Windows-style paths).\n              `(require(${stringify(value.__pluginPath)}))`\n            : value.__pluginConstructorName;\n\n          if (constructorExpression) {\n            // get correct indentation for args by stringifying the args array and\n            // discarding the square brackets.\n            const args = stringify(value.__pluginArgs).slice(1, -1);\n            return `${prefix}new ${constructorExpression}(${args})`;\n          }\n          return (\n            prefix +\n            stringify(\n              value.__pluginArgs && value.__pluginArgs.length\n                ? { args: value.__pluginArgs }\n                : {},\n            )\n          );\n        }\n\n        // improve rule/use output\n        if (value && value.__ruleNames) {\n          const ruleTypes = value.__ruleTypes;\n          const prefix = `/* ${configPrefix}.module${value.__ruleNames\n            .map(\n              (r, index) => `.${ruleTypes ? ruleTypes[index] : 'rule'}('${r}')`,\n            )\n            .join('')}${\n            value.__useName ? `.use('${value.__useName}')` : ``\n          } */\\n`;\n          return prefix + stringify(value);\n        }\n\n        if (value && value.__expression) {\n          return value.__expression;\n        }\n\n        // shorten long functions\n        if (typeof value === 'function') {\n          if (!verbose && value.toString().length > 100) {\n            return `function () { /* omitted long function */ }`;\n          }\n        }\n\n        return stringify(value);\n      },\n      2,\n    );\n  }\n\n  entry(name) {\n    return this.entryPoints.getOrCompute(name, () => new ChainedSet(this));\n  }\n\n  plugin(name) {\n    return this.plugins.getOrCompute(name, () => new Plugin(this, name));\n  }\n\n  toConfig() {\n    const entryPoints = this.entryPoints.entries() || {};\n\n    return this.clean(\n      Object.assign(this.entries() || {}, {\n        node: this.node.entries(),\n        output: this.output.entries(),\n        resolve: this.resolve.toConfig(),\n        resolveLoader: this.resolveLoader.toConfig(),\n        devServer: this.devServer.toConfig(),\n        module: this.module.toConfig(),\n        optimization: this.optimization.toConfig(),\n        plugins: this.plugins.values().map((plugin) => plugin.toConfig()),\n        performance: this.performance.entries(),\n        entry: Object.keys(entryPoints).reduce(\n          (acc, key) =>\n            Object.assign(acc, { [key]: entryPoints[key].values() }),\n          {},\n        ),\n      }),\n    );\n  }\n\n  toString(options) {\n    return module.exports.toString(this.toConfig(), options);\n  }\n\n  merge(obj = {}, omit = []) {\n    const omissions = [\n      'node',\n      'output',\n      'resolve',\n      'resolveLoader',\n      'devServer',\n      'optimization',\n      'performance',\n      'module',\n    ];\n\n    if (!omit.includes('entry') && 'entry' in obj) {\n      Object.keys(obj.entry).forEach((name) =>\n        this.entry(name).merge([].concat(obj.entry[name])),\n      );\n    }\n\n    if (!omit.includes('plugin') && 'plugin' in obj) {\n      Object.keys(obj.plugin).forEach((name) =>\n        this.plugin(name).merge(obj.plugin[name]),\n      );\n    }\n\n    omissions.forEach((key) => {\n      if (!omit.includes(key) && key in obj) {\n        this[key].merge(obj[key]);\n      }\n    });\n\n    return super.merge(obj, [...omit, ...omissions, 'entry', 'plugin']);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}