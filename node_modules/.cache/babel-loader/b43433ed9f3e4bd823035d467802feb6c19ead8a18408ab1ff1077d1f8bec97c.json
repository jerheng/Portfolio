{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toString = void 0;\nconst quote_1 = require(\"./quote\");\nconst object_1 = require(\"./object\");\nconst function_1 = require(\"./function\");\n/**\n * Stringify primitive values.\n */\nconst PRIMITIVE_TYPES = {\n  string: quote_1.quoteString,\n  number: value => Object.is(value, -0) ? \"-0\" : String(value),\n  boolean: String,\n  symbol: (value, space, next) => {\n    const key = Symbol.keyFor(value);\n    if (key !== undefined) return `Symbol.for(${next(key)})`;\n    // ES2018 `Symbol.description`.\n    return `Symbol(${next(value.description)})`;\n  },\n  bigint: (value, space, next) => {\n    return `BigInt(${next(String(value))})`;\n  },\n  undefined: String,\n  object: object_1.objectToString,\n  function: function_1.functionToString\n};\n/**\n * Stringify a value recursively.\n */\nconst toString = (value, space, next, key) => {\n  if (value === null) return \"null\";\n  return PRIMITIVE_TYPES[typeof value](value, space, next, key);\n};\nexports.toString = toString;","map":{"version":3,"names":["quote_1","require","object_1","function_1","PRIMITIVE_TYPES","string","quoteString","number","value","Object","is","String","boolean","symbol","space","next","key","Symbol","keyFor","undefined","description","bigint","object","objectToString","function","functionToString","toString","exports"],"sources":["../src/stringify.ts"],"sourcesContent":["import { quoteString } from \"./quote\";\nimport { Next, ToString } from \"./types\";\nimport { objectToString } from \"./object\";\nimport { functionToString } from \"./function\";\n\n/**\n * Stringify primitive values.\n */\nconst PRIMITIVE_TYPES: Record<string, ToString> = {\n  string: quoteString,\n  number: (value: number) => (Object.is(value, -0) ? \"-0\" : String(value)),\n  boolean: String,\n  symbol: (value: symbol, space: string, next: Next) => {\n    const key = Symbol.keyFor(value);\n\n    if (key !== undefined) return `Symbol.for(${next(key)})`;\n\n    // ES2018 `Symbol.description`.\n    return `Symbol(${next((value as any).description)})`;\n  },\n  bigint: (value: bigint, space: string, next: Next) => {\n    return `BigInt(${next(String(value))})`;\n  },\n  undefined: String,\n  object: objectToString,\n  function: functionToString,\n};\n\n/**\n * Stringify a value recursively.\n */\nexport const toString: ToString = (value, space, next, key) => {\n  if (value === null) return \"null\";\n\n  return PRIMITIVE_TYPES[typeof value](value, space, next, key);\n};\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAEA;;;AAGA,MAAMG,eAAe,GAA6B;EAChDC,MAAM,EAAEL,OAAA,CAAAM,WAAW;EACnBC,MAAM,EAAGC,KAAa,IAAMC,MAAM,CAACC,EAAE,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGG,MAAM,CAACH,KAAK,CAAE;EACxEI,OAAO,EAAED,MAAM;EACfE,MAAM,EAAEA,CAACL,KAAa,EAAEM,KAAa,EAAEC,IAAU,KAAI;IACnD,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACV,KAAK,CAAC;IAEhC,IAAIQ,GAAG,KAAKG,SAAS,EAAE,OAAO,cAAcJ,IAAI,CAACC,GAAG,CAAC,GAAG;IAExD;IACA,OAAO,UAAUD,IAAI,CAAEP,KAAa,CAACY,WAAW,CAAC,GAAG;EACtD,CAAC;EACDC,MAAM,EAAEA,CAACb,KAAa,EAAEM,KAAa,EAAEC,IAAU,KAAI;IACnD,OAAO,UAAUA,IAAI,CAACJ,MAAM,CAACH,KAAK,CAAC,CAAC,GAAG;EACzC,CAAC;EACDW,SAAS,EAAER,MAAM;EACjBW,MAAM,EAAEpB,QAAA,CAAAqB,cAAc;EACtBC,QAAQ,EAAErB,UAAA,CAAAsB;CACX;AAED;;;AAGO,MAAMC,QAAQ,GAAaA,CAAClB,KAAK,EAAEM,KAAK,EAAEC,IAAI,EAAEC,GAAG,KAAI;EAC5D,IAAIR,KAAK,KAAK,IAAI,EAAE,OAAO,MAAM;EAEjC,OAAOJ,eAAe,CAAC,OAAOI,KAAK,CAAC,CAACA,KAAK,EAAEM,KAAK,EAAEC,IAAI,EAAEC,GAAG,CAAC;AAC/D,CAAC;AAJYW,OAAA,CAAAD,QAAQ,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}