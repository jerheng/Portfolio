{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayToString = void 0;\n/**\n * Stringify an array of values.\n */\nconst arrayToString = (array, space, next) => {\n  // Map array values to their stringified values with correct indentation.\n  const values = array.map(function (value, index) {\n    const result = next(value, index);\n    if (result === undefined) return String(result);\n    return space + result.split(\"\\n\").join(`\\n${space}`);\n  }).join(space ? \",\\n\" : \",\");\n  const eol = space && values ? \"\\n\" : \"\";\n  return `[${eol}${values}${eol}]`;\n};\nexports.arrayToString = arrayToString;","map":{"version":3,"names":["arrayToString","array","space","next","values","map","value","index","result","undefined","String","split","join","eol","exports"],"sources":["../src/array.ts"],"sourcesContent":["import { ToString } from \"./types\";\n\n/**\n * Stringify an array of values.\n */\nexport const arrayToString: ToString = (array: any[], space, next) => {\n  // Map array values to their stringified values with correct indentation.\n  const values = array\n    .map(function (value, index) {\n      const result = next(value, index);\n\n      if (result === undefined) return String(result);\n\n      return space + result.split(\"\\n\").join(`\\n${space}`);\n    })\n    .join(space ? \",\\n\" : \",\");\n\n  const eol = space && values ? \"\\n\" : \"\";\n  return `[${eol}${values}${eol}]`;\n};\n"],"mappings":";;;;;;AAEA;;;AAGO,MAAMA,aAAa,GAAaA,CAACC,KAAY,EAAEC,KAAK,EAAEC,IAAI,KAAI;EACnE;EACA,MAAMC,MAAM,GAAGH,KAAK,CACjBI,GAAG,CAAC,UAAUC,KAAK,EAAEC,KAAK;IACzB,MAAMC,MAAM,GAAGL,IAAI,CAACG,KAAK,EAAEC,KAAK,CAAC;IAEjC,IAAIC,MAAM,KAAKC,SAAS,EAAE,OAAOC,MAAM,CAACF,MAAM,CAAC;IAE/C,OAAON,KAAK,GAAGM,MAAM,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,KAAKV,KAAK,EAAE,CAAC;EACtD,CAAC,CAAC,CACDU,IAAI,CAACV,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;EAE5B,MAAMW,GAAG,GAAGX,KAAK,IAAIE,MAAM,GAAG,IAAI,GAAG,EAAE;EACvC,OAAO,IAAIS,GAAG,GAAGT,MAAM,GAAGS,GAAG,GAAG;AAClC,CAAC;AAdYC,OAAA,CAAAd,aAAa,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}