{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringifyPath = exports.quoteKey = exports.isValidVariableName = exports.IS_VALID_IDENTIFIER = exports.quoteString = void 0;\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\nconst ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n/**\n * Map of characters to escape characters.\n */\nconst META_CHARS = new Map([[\"\\b\", \"\\\\b\"], [\"\\t\", \"\\\\t\"], [\"\\n\", \"\\\\n\"], [\"\\f\", \"\\\\f\"], [\"\\r\", \"\\\\r\"], [\"'\", \"\\\\'\"], ['\"', '\\\\\"'], [\"\\\\\", \"\\\\\\\\\"]]);\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\nfunction escapeChar(char) {\n  return META_CHARS.get(char) || `\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`;\n}\n/**\n * Quote a string.\n */\nfunction quoteString(str) {\n  return `'${str.replace(ESCAPABLE, escapeChar)}'`;\n}\nexports.quoteString = quoteString;\n/**\n * JavaScript reserved keywords.\n */\nconst RESERVED_WORDS = new Set((\"break else new var case finally return void catch for switch while \" + \"continue function this with default if throw delete in try \" + \"do instanceof typeof abstract enum int short boolean export \" + \"interface static byte extends long super char final native synchronized \" + \"class float package throws const goto private transient debugger \" + \"implements protected volatile double import public let yield\").split(\" \"));\n/**\n * Test for valid JavaScript identifier.\n */\nexports.IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n/**\n * Check if a variable name is valid.\n */\nfunction isValidVariableName(name) {\n  return typeof name === \"string\" && !RESERVED_WORDS.has(name) && exports.IS_VALID_IDENTIFIER.test(name);\n}\nexports.isValidVariableName = isValidVariableName;\n/**\n * Quote JavaScript key access.\n */\nfunction quoteKey(key, next) {\n  return isValidVariableName(key) ? key : next(key);\n}\nexports.quoteKey = quoteKey;\n/**\n * Serialize the path to a string.\n */\nfunction stringifyPath(path, next) {\n  let result = \"\";\n  for (const key of path) {\n    if (isValidVariableName(key)) {\n      result += `.${key}`;\n    } else {\n      result += `[${next(key)}]`;\n    }\n  }\n  return result;\n}\nexports.stringifyPath = stringifyPath;","map":{"version":3,"names":["ESCAPABLE","META_CHARS","Map","escapeChar","char","get","charCodeAt","toString","slice","quoteString","str","replace","exports","RESERVED_WORDS","Set","split","IS_VALID_IDENTIFIER","isValidVariableName","name","has","test","quoteKey","key","next","stringifyPath","path","result"],"sources":["../src/quote.ts"],"sourcesContent":["import { Next } from \"./types\";\n\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\nconst ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n/**\n * Map of characters to escape characters.\n */\nconst META_CHARS = new Map<string, string>([\n  [\"\\b\", \"\\\\b\"],\n  [\"\\t\", \"\\\\t\"],\n  [\"\\n\", \"\\\\n\"],\n  [\"\\f\", \"\\\\f\"],\n  [\"\\r\", \"\\\\r\"],\n  [\"'\", \"\\\\'\"],\n  ['\"', '\\\\\"'],\n  [\"\\\\\", \"\\\\\\\\\"],\n]);\n\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\nfunction escapeChar(char: string) {\n  return (\n    META_CHARS.get(char) ||\n    `\\\\u${`0000${char.charCodeAt(0).toString(16)}`.slice(-4)}`\n  );\n}\n\n/**\n * Quote a string.\n */\nexport function quoteString(str: string) {\n  return `'${str.replace(ESCAPABLE, escapeChar)}'`;\n}\n\n/**\n * JavaScript reserved keywords.\n */\nconst RESERVED_WORDS = new Set(\n  (\n    \"break else new var case finally return void catch for switch while \" +\n    \"continue function this with default if throw delete in try \" +\n    \"do instanceof typeof abstract enum int short boolean export \" +\n    \"interface static byte extends long super char final native synchronized \" +\n    \"class float package throws const goto private transient debugger \" +\n    \"implements protected volatile double import public let yield\"\n  ).split(\" \")\n);\n\n/**\n * Test for valid JavaScript identifier.\n */\nexport const IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n\n/**\n * Check if a variable name is valid.\n */\nexport function isValidVariableName(name: PropertyKey): name is string {\n  return (\n    typeof name === \"string\" &&\n    !RESERVED_WORDS.has(name) &&\n    IS_VALID_IDENTIFIER.test(name)\n  );\n}\n\n/**\n * Quote JavaScript key access.\n */\nexport function quoteKey(key: PropertyKey, next: Next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\n/**\n * Serialize the path to a string.\n */\nexport function stringifyPath(path: PropertyKey[], next: Next) {\n  let result = \"\";\n\n  for (const key of path) {\n    if (isValidVariableName(key)) {\n      result += `.${key}`;\n    } else {\n      result += `[${next(key)}]`;\n    }\n  }\n\n  return result;\n}\n"],"mappings":";;;;;;;;;;;;;AAEA;;;;;;AAMA,MAAMA,SAAS,GAAG,0HAA0H;AAE5I;;;AAGA,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAiB,CACzC,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,IAAI,EAAE,MAAM,CAAC,CACf,CAAC;AAEF;;;;;;AAMA,SAASC,UAAUA,CAACC,IAAY;EAC9B,OACEH,UAAU,CAACI,GAAG,CAACD,IAAI,CAAC,IACpB,MAAM,OAAOA,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAE9D;AAEA;;;AAGA,SAAgBC,WAAWA,CAACC,GAAW;EACrC,OAAO,IAAIA,GAAG,CAACC,OAAO,CAACX,SAAS,EAAEG,UAAU,CAAC,GAAG;AAClD;AAFAS,OAAA,CAAAH,WAAA,GAAAA,WAAA;AAIA;;;AAGA,MAAMI,cAAc,GAAG,IAAIC,GAAG,CAC5B,CACE,qEAAqE,GACrE,6DAA6D,GAC7D,8DAA8D,GAC9D,0EAA0E,GAC1E,mEAAmE,GACnE,8DAA8D,EAC9DC,KAAK,CAAC,GAAG,CAAC,CACb;AAED;;;AAGaH,OAAA,CAAAI,mBAAmB,GAAG,4BAA4B;AAE/D;;;AAGA,SAAgBC,mBAAmBA,CAACC,IAAiB;EACnD,OACE,OAAOA,IAAI,KAAK,QAAQ,IACxB,CAACL,cAAc,CAACM,GAAG,CAACD,IAAI,CAAC,IACzBN,OAAA,CAAAI,mBAAmB,CAACI,IAAI,CAACF,IAAI,CAAC;AAElC;AANAN,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AAQA;;;AAGA,SAAgBI,QAAQA,CAACC,GAAgB,EAAEC,IAAU;EACnD,OAAON,mBAAmB,CAACK,GAAG,CAAC,GAAGA,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC;AACnD;AAFAV,OAAA,CAAAS,QAAA,GAAAA,QAAA;AAIA;;;AAGA,SAAgBG,aAAaA,CAACC,IAAmB,EAAEF,IAAU;EAC3D,IAAIG,MAAM,GAAG,EAAE;EAEf,KAAK,MAAMJ,GAAG,IAAIG,IAAI,EAAE;IACtB,IAAIR,mBAAmB,CAACK,GAAG,CAAC,EAAE;MAC5BI,MAAM,IAAI,IAAIJ,GAAG,EAAE;KACpB,MAAM;MACLI,MAAM,IAAI,IAAIH,IAAI,CAACD,GAAG,CAAC,GAAG;;;EAI9B,OAAOI,MAAM;AACf;AAZAd,OAAA,CAAAY,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}