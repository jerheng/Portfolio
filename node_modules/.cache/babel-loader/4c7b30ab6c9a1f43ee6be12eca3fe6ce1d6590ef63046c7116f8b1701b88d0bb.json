{"ast":null,"code":"/*!\n * shallow-clone <https://github.com/jonschlinkert/shallow-clone>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nrequire(\"core-js/modules/es.array-buffer.detached.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer.js\");\nrequire(\"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\nrequire(\"core-js/modules/es.set.difference.v2.js\");\nrequire(\"core-js/modules/es.set.intersection.v2.js\");\nrequire(\"core-js/modules/es.set.is-disjoint-from.v2.js\");\nrequire(\"core-js/modules/es.set.is-subset-of.v2.js\");\nrequire(\"core-js/modules/es.set.is-superset-of.v2.js\");\nrequire(\"core-js/modules/es.set.symmetric-difference.v2.js\");\nrequire(\"core-js/modules/es.set.union.v2.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nconst valueOf = Symbol.prototype.valueOf;\nconst typeOf = require('kind-of');\nfunction clone(val, deep) {\n  switch (typeOf(val)) {\n    case 'array':\n      return val.slice();\n    case 'object':\n      return Object.assign({}, val);\n    case 'date':\n      return new val.constructor(Number(val));\n    case 'map':\n      return new Map(val);\n    case 'set':\n      return new Set(val);\n    case 'buffer':\n      return cloneBuffer(val);\n    case 'symbol':\n      return cloneSymbol(val);\n    case 'arraybuffer':\n      return cloneArrayBuffer(val);\n    case 'float32array':\n    case 'float64array':\n    case 'int16array':\n    case 'int32array':\n    case 'int8array':\n    case 'uint16array':\n    case 'uint32array':\n    case 'uint8clampedarray':\n    case 'uint8array':\n      return cloneTypedArray(val);\n    case 'regexp':\n      return cloneRegExp(val);\n    case 'error':\n      return Object.create(val);\n    default:\n      {\n        return val;\n      }\n  }\n}\nfunction cloneRegExp(val) {\n  const flags = val.flags !== void 0 ? val.flags : /\\w+$/.exec(val) || void 0;\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\nfunction cloneTypedArray(val, deep) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\nfunction cloneBuffer(val) {\n  const len = val.length;\n  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);\n  val.copy(buf);\n  return buf;\n}\nfunction cloneSymbol(val) {\n  return valueOf ? Object(valueOf.call(val)) : {};\n}\n\n/**\n * Expose `clone`\n */\n\nmodule.exports = clone;","map":{"version":3,"names":["require","valueOf","Symbol","prototype","typeOf","clone","val","deep","slice","Object","assign","constructor","Number","Map","Set","cloneBuffer","cloneSymbol","cloneArrayBuffer","cloneTypedArray","cloneRegExp","create","flags","exec","re","source","lastIndex","res","byteLength","Uint8Array","set","buffer","byteOffset","length","len","buf","Buffer","allocUnsafe","from","copy","call","module","exports"],"sources":["/Users/jeremyheng/Documents/GitHub/Portfolio/my-portfolio/node_modules/shallow-clone/index.js"],"sourcesContent":["/*!\n * shallow-clone <https://github.com/jonschlinkert/shallow-clone>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst valueOf = Symbol.prototype.valueOf;\nconst typeOf = require('kind-of');\n\nfunction clone(val, deep) {\n  switch (typeOf(val)) {\n    case 'array':\n      return val.slice();\n    case 'object':\n      return Object.assign({}, val);\n    case 'date':\n      return new val.constructor(Number(val));\n    case 'map':\n      return new Map(val);\n    case 'set':\n      return new Set(val);\n    case 'buffer':\n      return cloneBuffer(val);\n    case 'symbol':\n      return cloneSymbol(val);\n    case 'arraybuffer':\n      return cloneArrayBuffer(val);\n    case 'float32array':\n    case 'float64array':\n    case 'int16array':\n    case 'int32array':\n    case 'int8array':\n    case 'uint16array':\n    case 'uint32array':\n    case 'uint8clampedarray':\n    case 'uint8array':\n      return cloneTypedArray(val);\n    case 'regexp':\n      return cloneRegExp(val);\n    case 'error':\n      return Object.create(val);\n    default: {\n      return val;\n    }\n  }\n}\n\nfunction cloneRegExp(val) {\n  const flags = val.flags !== void 0 ? val.flags : (/\\w+$/.exec(val) || void 0);\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\n\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\n\nfunction cloneTypedArray(val, deep) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\n\nfunction cloneBuffer(val) {\n  const len = val.length;\n  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);\n  val.copy(buf);\n  return buf;\n}\n\nfunction cloneSymbol(val) {\n  return valueOf ? Object(valueOf.call(val)) : {};\n}\n\n/**\n * Expose `clone`\n */\n\nmodule.exports = clone;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}