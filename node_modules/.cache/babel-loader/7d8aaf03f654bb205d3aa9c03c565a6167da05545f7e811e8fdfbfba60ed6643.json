{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.objectToString = void 0;\nconst quote_1 = require(\"./quote\");\nconst function_1 = require(\"./function\");\nconst array_1 = require(\"./array\");\n/**\n * Transform an object into a string.\n */\nconst objectToString = (value, space, next, key) => {\n  // Support buffer in all environments.\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return `Buffer.from(${next(value.toString(\"base64\"))}, 'base64')`;\n  }\n  // Support `global` under test environments that don't print `[object global]`.\n  if (typeof global === \"object\" && value === global) {\n    return globalToString(value, space, next, key);\n  }\n  // Use the internal object string to select stringify method.\n  const toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\nexports.objectToString = objectToString;\n/**\n * Stringify an object of keys and values.\n */\nconst rawObjectToString = (obj, indent, next, key) => {\n  const eol = indent ? \"\\n\" : \"\";\n  const space = indent ? \" \" : \"\";\n  // Iterate over object keys and concat string together.\n  const values = Object.keys(obj).reduce(function (values, key) {\n    const fn = obj[key];\n    const result = next(fn, key);\n    // Omit `undefined` object entries.\n    if (result === undefined) return values;\n    // String format the value data.\n    const value = result.split(\"\\n\").join(`\\n${indent}`);\n    // Skip `key` prefix for function parser.\n    if (function_1.USED_METHOD_KEY.has(fn)) {\n      values.push(`${indent}${value}`);\n      return values;\n    }\n    values.push(`${indent}${quote_1.quoteKey(key, next)}:${space}${value}`);\n    return values;\n  }, []).join(`,${eol}`);\n  // Avoid new lines in an empty object.\n  if (values === \"\") return \"{}\";\n  return `{${eol}${values}${eol}}`;\n};\n/**\n * Stringify global variable access.\n */\nconst globalToString = (value, space, next) => {\n  return `Function(${next(\"return this\")})()`;\n};\n/**\n * Convert JavaScript objects into strings.\n */\nconst OBJECT_TYPES = {\n  \"[object Array]\": array_1.arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": (error, space, next) => {\n    return `new Error(${next(error.message)})`;\n  },\n  \"[object Date]\": date => {\n    return `new Date(${date.getTime()})`;\n  },\n  \"[object String]\": (str, space, next) => {\n    return `new String(${next(str.toString())})`;\n  },\n  \"[object Number]\": num => {\n    return `new Number(${num})`;\n  },\n  \"[object Boolean]\": bool => {\n    return `new Boolean(${bool})`;\n  },\n  \"[object Set]\": (set, space, next) => {\n    return `new Set(${next(Array.from(set))})`;\n  },\n  \"[object Map]\": (map, space, next) => {\n    return `new Map(${next(Array.from(map))})`;\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString\n};","map":{"version":3,"names":["quote_1","require","function_1","array_1","objectToString","value","space","next","key","Buffer","isBuffer","toString","global","globalToString","OBJECT_TYPES","Object","prototype","call","undefined","exports","rawObjectToString","obj","indent","eol","values","keys","reduce","fn","result","split","join","USED_METHOD_KEY","has","push","quoteKey","arrayToString","[object Error]","error","message","date","getTime","[object String]","str","num","bool","[object Set]","set","Array","from","[object Map]","map","String"],"sources":["../src/object.ts"],"sourcesContent":["import { Next, ToString } from \"./types\";\nimport { quoteKey } from \"./quote\";\nimport { USED_METHOD_KEY } from \"./function\";\nimport { arrayToString } from \"./array\";\n\n/**\n * Transform an object into a string.\n */\nexport const objectToString: ToString = (value, space, next, key) => {\n  // Support buffer in all environments.\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return `Buffer.from(${next(value.toString(\"base64\"))}, 'base64')`;\n  }\n\n  // Support `global` under test environments that don't print `[object global]`.\n  if (typeof global === \"object\" && value === global) {\n    return globalToString(value, space, next, key);\n  }\n\n  // Use the internal object string to select stringify method.\n  const toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n\n/**\n * Stringify an object of keys and values.\n */\nconst rawObjectToString: ToString = (obj, indent, next, key) => {\n  const eol = indent ? \"\\n\" : \"\";\n  const space = indent ? \" \" : \"\";\n\n  // Iterate over object keys and concat string together.\n  const values = Object.keys(obj)\n    .reduce(function (values, key) {\n      const fn = obj[key];\n      const result = next(fn, key);\n\n      // Omit `undefined` object entries.\n      if (result === undefined) return values;\n\n      // String format the value data.\n      const value = result.split(\"\\n\").join(`\\n${indent}`);\n\n      // Skip `key` prefix for function parser.\n      if (USED_METHOD_KEY.has(fn)) {\n        values.push(`${indent}${value}`);\n        return values;\n      }\n\n      values.push(`${indent}${quoteKey(key, next)}:${space}${value}`);\n      return values;\n    }, [] as string[])\n    .join(`,${eol}`);\n\n  // Avoid new lines in an empty object.\n  if (values === \"\") return \"{}\";\n\n  return `{${eol}${values}${eol}}`;\n};\n\n/**\n * Stringify global variable access.\n */\nconst globalToString: ToString = (value, space, next) => {\n  return `Function(${next(\"return this\")})()`;\n};\n\n/**\n * Convert JavaScript objects into strings.\n */\nconst OBJECT_TYPES: Record<string, ToString> = {\n  \"[object Array]\": arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": (error: Error, space: string, next: Next) => {\n    return `new Error(${next(error.message)})`;\n  },\n  \"[object Date]\": (date: Date) => {\n    return `new Date(${date.getTime()})`;\n  },\n  \"[object String]\": (str: string, space: string, next: Next) => {\n    return `new String(${next(str.toString())})`;\n  },\n  \"[object Number]\": (num: number) => {\n    return `new Number(${num})`;\n  },\n  \"[object Boolean]\": (bool: boolean) => {\n    return `new Boolean(${bool})`;\n  },\n  \"[object Set]\": (set: Set<any>, space: string, next: Next) => {\n    return `new Set(${next(Array.from(set))})`;\n  },\n  \"[object Map]\": (map: Map<any, any>, space: string, next: Next) => {\n    return `new Map(${next(Array.from(map))})`;\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}